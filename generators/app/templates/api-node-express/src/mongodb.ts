/**
 * Generated by 'generator-ego' (https://github.com/egodigital/generator-ego)
 *
 * by e.GO Digital GmbH, Aachen, Germany (https://e-go-digital.com)
 */

import * as egoose from '@egodigital/egoose';
import * as mongoose from 'mongoose';

/**
 * A document from 'accounts' collections.
 */
export interface AccountDocument extends mongoose.Document {
    /**
     * The email address.
     */
    email: string;
    /**
     * The (hashed) password.
     */
    password?: string;
}

/**
 * A document from 'logs' collections.
 */
export interface LogsDocument extends mongoose.Document {
    /**
     * The message.
     */
    message?: string;
    /**
     * The tag.
     */
    tag?: string;
    /**
     * The timestamp.
     */
    time: Date;
    /**
     * The type.
     */
    type: number;
}

/**
 * A (MongoDB) database connection.
 */
export class Database extends egoose.MongoDatabase {
    /**
     * Gets the 'accounts' collection.
     */
    public get Accounts(): mongoose.Model<AccountDocument> {
        return this.model('Accounts');
    }

    /** @inheritdoc */
    public static fromEnvironment(): Database {
        return new Database({
            database: process.env.MONGO_DB,
            host: process.env.MONGO_HOST,
            options: process.env.MONGO_OPTIONS,
            port: parseInt( process.env.MONGO_PORT ),
            password: process.env.MONGO_PASSWORD,
            user: process.env.MONGO_USER,
        });
    }

    /**
     * Gets the 'logs' collection.
     */
    public get Logs(): mongoose.Model<LogsDocument> {
        return this.model('Logs');
    }
}

/**
 * Initializes the mongo database.
 */
export function initDatabase() {
    mongoose.set('useCreateIndex', true);

    // accounts
    egoose.MONGO_SCHEMAS['Accounts'] = new mongoose.Schema({
        email: {
            lowercase: true,
            trim: true,
            type: String,
            unique: true,
        },
        password: {
            lowercase: true,
            required: false,
            trim: true,
            type: String,
        },
    });
    egoose.MONGO_SCHEMAS['Accounts']
          .index({ email: 1 }, { unique: true });

    // logs
    egoose.MONGO_SCHEMAS['Logs'] = new mongoose.Schema({
        message: {
            required: false,
            type: String,
        },
        tag: {
            lowercase: true,
            required: false,
            trim: true,
            type: String,
        },
        time: {
            type: Date,
        },
        type: {
            required: false,
            type: Number,
        },
    });
    egoose.MONGO_SCHEMAS['Logs']
          .index({ tag: 1 });
    egoose.MONGO_SCHEMAS['Logs']
          .index({ type: 1 });
}
